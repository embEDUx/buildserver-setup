# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### EMBEDUX CONSTANTS

psk = "{{ buildbot_psk }}"

arch_branch_res_map = {
    {% for arch, regex_list in arch_branchregex.items() %}
    "{{ arch }}": {{ regex_list }},
    {% endfor %}
}

git_repo_uris = {
  "default": ["{{ repos_url_base }}/linux-specs.git",
          "{{ repos_url_base }}/uboot-specs.git",
          "{{ repos_url_base }}/toolchain-specs.git",
          "{{ repos_url_base }}/misc-specs.git"],
  "rootfs": ["{{ repos_url_base }}/rootfs-specs.git"],
  "rootfs_buildroutine": "{{ repos_url_base }}/rootfs-buildroutine.git",
}


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c["slaves"] = [BuildSlave(arch, psk) for arch in arch_branch_res_map.keys()]
c["slaves"].extend([BuildSlave("rootfs_"+arch, psk) for arch in arch_branch_res_map.keys()])

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
for git_repo_uri in git_repo_uris["default"]+git_repo_uris["rootfs"]:
  c['change_source'].append(GitPoller(
          repourl=git_repo_uri,
          branches=True,
          pollinterval=30))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import *
from buildbot.changes import filter


def default_repos(repository):
  return repository in git_repo_uris["default"]

def rootfs_repos(repository):
  return repository in git_repo_uris["rootfs"]

c['schedulers'] = []
for arch,branch_res in arch_branch_res_map.items():
  for branch_re in branch_res:
    c['schedulers'].append(AnyBranchScheduler(
      name="default / arch: %s / branch-filter: '%s'" % (arch, branch_re),
      change_filter=filter.ChangeFilter(branch_re=branch_re,
                                        repository_fn=default_repos),
      treeStableTimer=10,
      builderNames=[arch]))

for arch in arch_branch_res_map.keys():
  branch_re="%s.*" % arch
  c['schedulers'].append(AnyBranchScheduler(
    name="rootfs / arch: %s / branch-filter: '%s'" % (arch, branch_re),
    change_filter=filter.ChangeFilter(branch_re=branch_re,
                                      repository_fn=rootfs_repos),
    treeStableTimer=10,
    builderNames=["rootfs_"+arch]))

c['schedulers'].append(ForceScheduler(
  name="force default builds",
  reason=StringParameter(name="reason",label="reason:<br>",
                         required=True, size=80),
  repository=ChoiceStringParameter(
    name="repository",
    choices=git_repo_uris["default"],
    required=True
  ),
  branch=StringParameter(name="branch", required=True),
  # will generate nothing in the form, but revision, repository,
  # and project are needed by buildbot scheduling system so we
  # need to pass a value ("")
  revision=FixedParameter(name="revision", default=""),
  project=FixedParameter(name="project", default=""),
  properties = [],
  builderNames=arch_branch_res_map.keys()
))

c['schedulers'].append(ForceScheduler(
  name="force rootfs builds",
  reason=StringParameter(name="reason",label="reason:<br>",
                         required=True, size=80),
  repository=ChoiceStringParameter(
    name="repository",
    choices=git_repo_uris["rootfs"],
    required=True
  ),
  branch=StringParameter(name="branch", required=True),
  # will generate nothing in the form, but revision, repository,
  # and project are needed by buildbot scheduling system so we
  # need to pass a value ("")
  revision=FixedParameter(name="revision", default=""),
  project=FixedParameter(name="project", default=""),
  properties = [],
  builderNames=["rootfs_"+arch for arch in arch_branch_res_map.keys()]
))
                          
####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, SetPropertyFromCommand
from buildbot.process.properties import Property
from buildbot.steps.master import SetProperty
from buildbot.process.properties import Interpolate, renderer
from buildbot.steps.transfer import DirectoryUpload, MultipleFileUpload

@renderer
def get_platform(props):
  branch = props.getProperty("branch")
  if "_" in branch:
    platform = branch.split("_")[-1]
  else:
    platform = branch
  return platform

@renderer
def get_product(props):
  repository = props.getProperty("repository")
  product = repository
  product = product.split("/",-1)[-1]
  product = product.replace(".git","")
  return product

def glob2list_1(rc, stdout, stderr):
    return { "upload_files": [ l.strip() for l in stdout.split('\n') if l != ""] }

# default factory
factory_default = BuildFactory()
factory_default.addStep(SetProperty(property="platform", value=get_platform))
factory_default.addStep(SetProperty(property="product", value=get_product))
factory_default.addStep(Git(repourl=Property("repository"), mode='full',
                    method='clobber', haltOnFailure=True))
factory_default.addStep(ShellCommand(command=["./build"], haltOnFailure=True, usePTY=True))

factory_default.addStep(SetPropertyFromCommand(command="pushd output >/dev/null; find *; popd >/dev/null", extract_fn=glob2list_1))
factory_default.addStep(
  DirectoryUpload(
    slavesrc="output",
    masterdest=Interpolate("/var/lib/buildmaster/public_html/%(prop:product)s/%(prop:platform)s"),
    url=Interpolate("/%(prop:product)s/%(prop:platform)s")
  )
)

# rootfs factory
factory_rootfs = BuildFactory()
factory_rootfs.addStep(SetProperty(property="platform", value=get_platform))
factory_rootfs.addStep(SetProperty(property="product", value=get_product))
factory_rootfs.addStep(Git(repourl=Property("repository"), mode='full',
                    method='clobber', haltOnFailure=True, workdir="build"))
factory_rootfs.addStep(ShellCommand(command="/usr/bin/git clone --single-branch --depth 1 %s .ansible" % git_repo_uris['rootfs_buildroutine']))
factory_rootfs.addStep(ShellCommand(command=" ansible-playbook -i .ansible/hosts .ansible/site.yml -vvvvv",
                                    timeout=None, usePTY=True, haltOnFailure=True, 
                                    env={ "TERM": "vt100",
                                          "ANSIBLE_CONFIG": ".ansible/ansible.cfg",
                                          "ANSIBLE_FORCE_COLOR": "1"
                                    }))
factory_rootfs.addStep(SetPropertyFromCommand(command="pushd output >/dev/null; find *; popd >/dev/null", extract_fn=glob2list_1))
factory_rootfs.addStep(
  DirectoryUpload(
    slavesrc="output",
    masterdest=Interpolate("/var/lib/buildmaster/public_html/%(prop:product)s/%(prop:platform)s"),
    url=Interpolate("/%(prop:product)s/%(prop:platform)s")
  )
)


from buildbot.config import BuilderConfig

c['builders'] = []

for arch in arch_branch_res_map.iterkeys():
  c['builders'].append(
      BuilderConfig(
        name=arch,
        slavenames=arch,
        factory=factory_default,
        ))
for arch in arch_branch_res_map.iterkeys():
  c['builders'].append(
      BuilderConfig(
        name="rootfs_"+arch,
        slavenames="rootfs_"+arch,
        factory=factory_rootfs,
        ))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

users = [
    {% for user,pw in users.items() %}
    ("{{ user}}", "{{ pw }}"),
    {% endfor %}
]
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(users),
    gracefulShutdown = 'auth',
    forceBuild = 'auth', # use this to test your slave once it is set up
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
    pingBuilder = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "embEDUx"
c['titleURL'] = "{{ repos_url_base }}"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
